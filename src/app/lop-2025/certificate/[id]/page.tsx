// src/app/lop-2025/certificate/[id]/page.tsx
'use client';

import Image from 'next/image';
import Link from 'next/link';
import { useRef, useEffect, useState } from 'react';
import { lop2025Runners } from '../../../../data/lop2025Runners';

interface PageProps {
  params: Promise<{
    id: string;
  }>;
}

export default function LOP2025Certificate({ params }: PageProps) {
  const certificateRef = useRef<HTMLDivElement>(null);
  const [id, setId] = useState<string>('');
  // eslint-disable-next-line
  const [runner, setRunner] = useState<any>(null);

  useEffect(() => {
    const getParams = async () => {
      const resolvedParams = await params;
      setId(resolvedParams.id);
      const foundRunner = lop2025Runners.find(r => r.stt.toString() === resolvedParams.id);
      setRunner(foundRunner);
    };
    getParams();
  }, [params]);

  // Method 1: HTML2Canvas - Best for precise element capture
  const downloadCertificateHTML2Canvas = async () => {
    if (!certificateRef.current || !runner) return;

    try {
      alert('ƒêang chu·∫©n b·ªã t·∫£i ch·ª©ng ch·ªâ...');
      
      // Dynamically import html2canvas
      const html2canvas = await import('html2canvas');
      
      // Scroll to certificate and wait
      certificateRef.current.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      });
      await new Promise(resolve => setTimeout(resolve, 1500));

      // Capture only the certificate element with correct options
      const canvas = await html2canvas.default(certificateRef.current, {
        allowTaint: true,
        background: '#ffffff', // Fixed: was backgroundColor
        // scale: 2, // Higher quality
        useCORS: true,
        logging: false,
        width: certificateRef.current.offsetWidth,
        height: certificateRef.current.offsetHeight,
        // scrollX: 0,
        // scrollY: 0,
        // x: 0,
        // y: 0
      });

      // Convert to blob and download
      canvas.toBlob((blob) => {
        if (blob) {
          const url = URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = `LOP2025-Certificate-${runner.name.replace(/\s+/g, '-')}.png`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
          
          alert('‚úÖ Ch·ª©ng ch·ªâ ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng!\n\nFile ch·ªâ ch·ª©a ph·∫ßn ch·ª©ng ch·ªâ, kh√¥ng c√≥ n·ªÅn trang web. üéâ');
        }
      }, 'image/png', 1.0);

    } catch (error) {
      console.error('Error with HTML2Canvas:', error);
      alert('‚ùå C√≥ l·ªói x·∫£y ra v·ªõi ch·ª©c nƒÉng t·ª± ƒë·ªông.\n\nVui l√≤ng th·ª≠:\n1. T·∫£i l·∫°i trang\n2. S·ª≠ d·ª•ng ch·ª©c nƒÉng "Ch·ª•p C√≥ H∆∞·ªõng D·∫´n"\n3. Ho·∫∑c ch·ª•p th·ªß c√¥ng');
    }
  };

  // Method 2: Screen Capture with highlighting
  const downloadCertificateScreenshot = async () => {
    if (!certificateRef.current || !runner) return;

    try {
      if (!navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia) {
        alert('‚ùå Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ch·ª•p m√†n h√¨nh t·ª± ƒë·ªông.\n\nVui l√≤ng s·ª≠ d·ª•ng:\n‚Ä¢ Ch·ª©c nƒÉng "T·∫£i T·ª± ƒê·ªông" (HTML2Canvas)\n‚Ä¢ Ho·∫∑c "H∆∞·ªõng D·∫´n Ch·ª•p"');
        return;
      }

      // Scroll and highlight
      certificateRef.current.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      });
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Add highlight border
      const originalBorder = certificateRef.current.style.border;
      const originalShadow = certificateRef.current.style.boxShadow;
      
      certificateRef.current.style.border = '6px solid #ff4444';
      certificateRef.current.style.boxShadow = '0 0 30px rgba(255, 68, 68, 0.6), inset 0 0 20px rgba(255, 68, 68, 0.2)';

      const confirmed = confirm(`üñ•Ô∏è CH·ª§P M√ÄN H√åNH C√ì H∆Ø·ªöNG D·∫™N

C√°c b∆∞·ªõc th·ª±c hi·ªán:

1Ô∏è‚É£ Nh·∫•n "OK" ƒë·ªÉ b·∫Øt ƒë·∫ßu
2Ô∏è‚É£ Ch·ªçn tab hi·ªán t·∫°i khi ƒë∆∞·ª£c h·ªèi chia s·∫ª m√†n h√¨nh  
3Ô∏è‚É£ Ch·ª©ng ch·ªâ ƒë∆∞·ª£c ƒë√°nh d·∫•u b·∫±ng VI·ªÄN ƒê·ªé
4Ô∏è‚É£ Sau khi ch·ª•p xong, crop ·∫£nh theo vi·ªÅn ƒë·ªè

‚ö†Ô∏è L∆∞u √Ω: B·∫°n s·∫Ω c·∫ßn t·ª± crop ·∫£nh sau khi t·∫£i xu·ªëng

Ti·∫øp t·ª•c?`);
      
      if (!confirmed) {
        certificateRef.current.style.border = originalBorder;
        certificateRef.current.style.boxShadow = originalShadow;
        return;
      }

      // Screen capture process
      const stream = await navigator.mediaDevices.getDisplayMedia({
        video: {
          // mediaSource: 'screen',
          width: { ideal: 1920 },
          height: { ideal: 1080 }
        },
        audio: false
      });

      const video = document.createElement('video');
      video.srcObject = stream;
      video.muted = true;
      
      await new Promise<void>((resolve) => { // Fixed: added void type
        video.onloadedmetadata = () => {
          video.play();
          resolve();
        };
      });

      await new Promise(resolve => setTimeout(resolve, 500));

      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      ctx?.drawImage(video, 0, 0, canvas.width, canvas.height);
      
      stream.getTracks().forEach(track => track.stop());
      
      // Restore styles
      certificateRef.current.style.border = originalBorder;
      certificateRef.current.style.boxShadow = originalShadow;
      
      canvas.toBlob((blob) => {
        if (blob) {
          const url = URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = `LOP2025-Certificate-${runner.name.replace(/\s+/g, '-')}-crop-needed.png`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
          
          alert(`‚úÖ ·∫¢nh ƒë√£ t·∫£i xu·ªëng th√†nh c√¥ng!

üìù B∆Ø·ªöC TI·∫æP THEO:
‚Ä¢ M·ªü ·∫£nh v·ª´a t·∫£i xu·ªëng
‚Ä¢ Crop/c·∫Øt ·∫£nh ƒë·ªÉ ch·ªâ gi·ªØ ph·∫ßn ch·ª©ng ch·ªâ (c√≥ vi·ªÅn ƒë·ªè)
‚Ä¢ L∆∞u file m·ªõi

üí° TIP: D√πng Paint, Photoshop, ho·∫∑c ·ª©ng d·ª•ng ch·ªânh ·∫£nh ƒë·ªÉ crop`);
        }
      }, 'image/png', 1.0);

    } catch (error) {
      console.error('Error with screenshot:', error);
      
      if (certificateRef.current) {
        certificateRef.current.style.border = '';
        certificateRef.current.style.boxShadow = '';
      }
      
      if ((error as Error).name === 'NotAllowedError') { // Fixed: proper error typing
        alert('‚ùå B·∫°n ƒë√£ t·ª´ ch·ªëi chia s·∫ª m√†n h√¨nh.\n\nVui l√≤ng th·ª≠:\n‚Ä¢ Ch·ª©c nƒÉng "T·∫£i T·ª± ƒê·ªông"\n‚Ä¢ Ho·∫∑c "H∆∞·ªõng D·∫´n Th·ªß C√¥ng"');
      } else {
        alert('‚ùå C√≥ l·ªói x·∫£y ra v·ªõi ch·ª•p m√†n h√¨nh.\n\nVui l√≤ng th·ª≠ ch·ª©c nƒÉng kh√°c.');
      }
    }
  };

  // Method 3: Visual guide for manual screenshot
  const downloadCertificateAuto = async () => {
    if (!certificateRef.current || !runner) return;

    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

    try {
      // Scroll to certificate
      certificateRef.current.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      });
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Get bounds for visual guide
      const rect = certificateRef.current.getBoundingClientRect();
      
      // Create overlay with precise crop guide
      const overlay = document.createElement('div');
      overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.85);
        z-index: 9999;
        font-family: Arial, sans-serif;
      `;

      // Crop guide box
      const cropGuide = document.createElement('div');
      cropGuide.style.cssText = `
        position: absolute;
        top: ${Math.max(0, rect.top - 10)}px;
        left: ${Math.max(0, rect.left - 10)}px;
        width: ${Math.min(window.innerWidth - rect.left + 10, rect.width + 20)}px;
        height: ${Math.min(window.innerHeight - rect.top + 10, rect.height + 20)}px;
        border: 4px dashed #00ff00;
        background: rgba(0, 255, 0, 0.1);
        pointer-events: none;
        box-shadow: 0 0 20px rgba(0, 255, 0, 0.5);
      `;

      // Instruction panel
      const instructions = document.createElement('div');
      instructions.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: white;
        color: black;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        max-width: ${isMobile ? '320px' : '420px'};
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        border: 3px solid #00ff00;
      `;

      let countdown = 12;
      instructions.innerHTML = `
        <h3 style="margin: 0 0 15px 0; color: #00aa00; font-size: ${isMobile ? '18px' : '20px'};">
          üì± H∆Ø·ªöNG D·∫™N CH·ª§P CH√çNH X√ÅC
        </h3>
        <p style="margin: 0 0 15px 0; font-size: ${isMobile ? '14px' : '16px'}; line-height: 1.4;">
          Ch·ª•p m√†n h√¨nh v√† crop theo <strong style="color: #00aa00;">V√ôNG XANH</strong> b√™n d∆∞·ªõi:
        </p>
        <div style="background: #f8f8f8; padding: 15px; border-radius: 8px; margin: 15px 0; font-size: ${isMobile ? '13px' : '14px'}; text-align: left; border-left: 4px solid #00aa00;">
          ${isMobile ? `
            <div style="margin-bottom: 8px;"><strong>üì± ANDROID:</strong></div>
            <div style="margin-bottom: 12px; padding-left: 10px;">‚Ä¢ Power + Volume Down c√πng l√∫c</div>
            
            <div style="margin-bottom: 8px;"><strong>üì± iPHONE:</strong></div>
            <div style="margin-bottom: 12px; padding-left: 10px;">‚Ä¢ Side Button + Volume Up</div>
            
            <div style="margin-bottom: 8px;"><strong>üí° QUAN TR·ªåNG:</strong></div>
            <div style="padding-left: 10px;">‚Ä¢ Crop ·∫£nh theo v√πng xanh sau khi ch·ª•p</div>
          ` : `
            <div style="margin-bottom: 8px;"><strong>üíª WINDOWS:</strong></div>
            <div style="margin-bottom: 12px; padding-left: 10px;">‚Ä¢ Windows + Shift + S (Snipping Tool)</div>
            
            <div style="margin-bottom: 8px;"><strong>üíª MAC:</strong></div>
            <div style="margin-bottom: 12px; padding-left: 10px;">‚Ä¢ Cmd + Shift + 4 (k√©o ch·ªçn v√πng)</div>
            
            <div style="margin-bottom: 8px;"><strong>üîß C√ÅCH KH√ÅC:</strong></div>
            <div style="padding-left: 10px;">‚Ä¢ D√πng Snipping Tool ho·∫∑c Screenshot app</div>
          `}
        </div>
        <div style="background: #e8f5e8; padding: 10px; border-radius: 5px; margin: 15px 0; font-size: ${isMobile ? '12px' : '13px'};">
          <strong style="color: #00aa00;">üéØ M·ª§C TI√äU:</strong> Ch·ª•p ch·ªâ ph·∫ßn trong khung xanh = Ch·ª©ng ch·ªâ ho√†n h·∫£o!
        </div>
        <p style="color: #00aa00; font-size: ${isMobile ? '16px' : '18px'}; margin: 15px 0; font-weight: bold;">
          T·ª± ƒë·ªông ƒë√≥ng: <span id="countdown">${countdown}</span>s
        </p>
        <button id="closeOverlay" style="
          background: #00aa00; 
          color: white; 
          border: none; 
          padding: 12px 24px; 
          border-radius: 8px; 
          cursor: pointer;
          font-size: 16px;
          font-weight: bold;
          box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        ">‚úÖ ƒê√£ hi·ªÉu, ƒë√≥ng ngay</button>
      `;

      overlay.appendChild(cropGuide);
      overlay.appendChild(instructions);
      document.body.appendChild(overlay);

      // Countdown and events
      const countdownEl = instructions.querySelector('#countdown');
      const closeBtn = instructions.querySelector('#closeOverlay');
      
      const timer = setInterval(() => {
        countdown--;
        if (countdownEl) countdownEl.textContent = countdown.toString();
        
        if (countdown <= 0) {
          clearInterval(timer);
          cleanup();
        }
      }, 1000);

      closeBtn?.addEventListener('click', () => {
        clearInterval(timer);
        cleanup();
      });

      const handleEscape = (e: KeyboardEvent) => {
        if (e.key === 'Escape') {
          clearInterval(timer);
          cleanup();
        }
      };
      document.addEventListener('keydown', handleEscape);

      const cleanup = () => {
        if (document.body.contains(overlay)) {
          document.body.removeChild(overlay);
        }
        document.removeEventListener('keydown', handleEscape);
      };

    } catch (error) {
      console.error('Error:', error);
      alert('‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ª•p th·ªß c√¥ng.');
    }
  };

  const showDownloadInstructions = () => {
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    const instructions = isMobile ? `üì± H∆Ø·ªöNG D·∫™N CH·ª§P CH·ª®NG CH·ªà - MOBILE

ü§ñ ANDROID:
‚Ä¢ B∆∞·ªõc 1: Nh·∫•n gi·ªØ n√∫t Power + Volume Down c√πng l√∫c
‚Ä¢ B∆∞·ªõc 2: Ho·∫∑c vu·ªët xu·ªëng t·ª´ tr√™n m√†n h√¨nh ‚Üí ch·ªçn "Screenshot"  
‚Ä¢ B∆∞·ªõc 3: M·ªü ·∫£nh v·ª´a ch·ª•p trong Gallery
‚Ä¢ B∆∞·ªõc 4: Nh·∫•n "Edit" ‚Üí "Crop" ‚Üí C·∫Øt ch·ªâ gi·ªØ ph·∫ßn ch·ª©ng ch·ªâ
‚Ä¢ B∆∞·ªõc 5: L∆∞u ·∫£nh ƒë√£ c·∫Øt

üì± iPHONE/iPAD:
‚Ä¢ B∆∞·ªõc 1: iPhone X+: Nh·∫•n Side Button + Volume Up
‚Ä¢ B∆∞·ªõc 2: iPhone 8-: Nh·∫•n Home + Power Button  
‚Ä¢ B∆∞·ªõc 3: iPad: Nh·∫•n Top Button + Home/Volume Up
‚Ä¢ B∆∞·ªõc 4: Nh·∫•n v√†o ·∫£nh thumbnail ·ªü g√≥c m√†n h√¨nh
‚Ä¢ B∆∞·ªõc 5: Nh·∫•n "Crop" ‚Üí C·∫Øt theo khung ch·ª©ng ch·ªâ
‚Ä¢ B∆∞·ªõc 6: Nh·∫•n "Done" ƒë·ªÉ l∆∞u

üí° M·∫∏O HAY:
- Xoay ngang ƒëi·ªán tho·∫°i ƒë·ªÉ ch·ª©ng ch·ªâ hi·ªÉn th·ªã l·ªõn h∆°n
- Zoom out (thu nh·ªè) ƒë·ªÉ th·∫•y to√†n b·ªô ch·ª©ng ch·ªâ
- D√πng 2 ng√≥n tay ƒë·ªÉ pinch-to-zoom tr∆∞·ªõc khi ch·ª•p
- Ch·ª•p ·ªü n∆°i c√≥ √°nh s√°ng t·ªët ƒë·ªÉ ·∫£nh r√µ n√©t
    ` : `üíª H∆Ø·ªöNG D·∫™N CH·ª§P CH·ª®NG CH·ªà - DESKTOP

üñ•Ô∏è WINDOWS:
‚Ä¢ C√°ch 1 (Khuy√™n d√πng): 
  - Nh·∫•n Windows + Shift + S
  - K√©o chu·ªôt ch·ªçn v√πng ch·ª©ng ch·ªâ
  - ·∫¢nh t·ª± ƒë·ªông copy v√†o clipboard
  - M·ªü Paint ‚Üí Ctrl+V ‚Üí Save

‚Ä¢ C√°ch 2: Snipping Tool
  - M·ªü Start Menu ‚Üí t√¨m "Snipping Tool"
  - Ch·ªçn "New" ‚Üí k√©o ch·ªçn v√πng ch·ª©ng ch·ªâ
  - File ‚Üí Save As

‚Ä¢ C√°ch 3: Print Screen
  - Nh·∫•n PrtSc (to√†n m√†n h√¨nh)
  - M·ªü Paint ‚Üí Ctrl+V ‚Üí Crop ‚Üí Save

üíª MAC:
‚Ä¢ C√°ch 1 (Khuy√™n d√πng):
  - Nh·∫•n Cmd + Shift + 4
  - K√©o chu·ªôt ch·ªçn v√πng ch·ª©ng ch·ªâ
  - File t·ª± ƒë·ªông l∆∞u tr√™n Desktop

‚Ä¢ C√°ch 2: Screenshot to√†n m√†n h√¨nh
  - Cmd + Shift + 3 (to√†n m√†n h√¨nh)
  - M·ªü ·∫£nh ‚Üí d√πng Preview ƒë·ªÉ crop

üîß C√ÅCH KH√ÅC (T·∫•t c·∫£ h·ªá ƒëi·ªÅu h√†nh):
‚Ä¢ Nh·∫•n F12 ‚Üí Developer Tools
‚Ä¢ Nh·∫•n chu·ªôt ph·∫£i v√†o ch·ª©ng ch·ªâ ‚Üí "Inspect"
‚Ä¢ T√¨m div ch·ª©a ch·ª©ng ch·ªâ ‚Üí chu·ªôt ph·∫£i
‚Ä¢ Ch·ªçn "Capture node screenshot"

‚ö° CHROME EXTENSION:
‚Ä¢ C√†i "Awesome Screenshot" ho·∫∑c "FireShot"
‚Ä¢ Ch·ª•p v√πng ƒë∆∞·ª£c ch·ªçn tr·ª±c ti·∫øp
    `;
    
    alert(instructions);
  };

  if (!runner) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-yellow-100 to-blue-50 py-8 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-yellow-500 mx-auto mb-4"></div>
          <p className="text-lg text-gray-600">ƒêang t·∫£i ch·ª©ng ch·ªâ...</p>
        </div>
      </div>
    );
  }

  const currentDate = new Date().toLocaleDateString('vi-VN', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });

  // Calculate rank based on position in array (already sorted)
  const rank = lop2025Runners.findIndex(r => r.stt.toString() === id) + 1;
  
  // Get medal emoji for top 3
  const getMedalEmoji = (rank: number) => {
    if (rank === 1) return 'ü•á';
    if (rank === 2) return 'ü•à';
    if (rank === 3) return 'ü•â';
    return 'üèÜ';
  };

  const getRankColor = (rank: number) => {
    if (rank === 1) return 'from-yellow-300 to-yellow-400';
    if (rank === 2) return 'from-gray-200 to-gray-400';
    if (rank === 3) return 'from-amber-300 to-amber-500';
    return 'from-blue-400 to-blue-500';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-yellow-100 to-blue-50 py-4 md:py-8">
      <div className="max-w-4xl mx-auto px-3 sm:px-4 md:px-6 lg:px-8">
        {/* Back Button */}
        <div className="mb-6">
          <Link 
            href="/lop-2025"
            className="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Quay l·∫°i b·∫£ng x·∫øp h·∫°ng LOP2025
          </Link>
        </div>

        {/* Certificate */}
        <div 
          ref={certificateRef} 
          className="bg-white rounded-xl md:rounded-2xl shadow-2xl overflow-hidden border-4 md:border-8 border-yellow-300"
          style={{ 
            position: 'relative',
            isolation: 'isolate'
          }}
        >
          {/* Certificate Header */}
          <div className="bg-gradient-to-r from-yellow-200 via-amber-300 to-blue-400 text-white py-4 md:py-8 px-4 md:px-8 text-center relative overflow-hidden">
            <div className="absolute inset-0 bg-black/20"></div>
            <div className="absolute top-0 left-0 w-full h-1 md:h-2 bg-gradient-to-r from-yellow-300 via-amber-300 to-blue-300"></div>
            
            <div className="relative">
              <div className="flex justify-center mb-2 md:mb-4">
                <div className="w-12 h-12 md:w-20 md:h-20 bg-blue-600/20 rounded-full flex items-center justify-center backdrop-blur-sm border-2 border-yellow-200">
                  <span className="text-xl md:text-3xl">{getMedalEmoji(rank)}</span>
                </div>
              </div>
              <h1 className="text-xl md:text-3xl font-bold mb-1 md:mb-2 text-blue-900">CH·ª®NG CH·ªà HO√ÄN TH√ÄNH</h1>
              <p className="text-sm md:text-xl opacity-90 text-blue-800">Legend of PMHR 2025</p>
              <div className="mt-2 md:mt-4 inline-block bg-blue-600/20 backdrop-blur-sm rounded-full px-3 md:px-6 py-1 md:py-2 border border-yellow-200">
                <span className="font-semibold text-blue-900 text-xs md:text-base">PH√ö M·ª∏ H∆ØNG RUNNERS</span>
              </div>
            </div>
          </div>

          {/* Certificate Body */}
          <div className="p-4 md:p-8 lg:p-12 relative">
            {/* Logo in top left of body */}
            <div className="absolute top-2 left-2 md:top-4 md:left-4">
              <Image 
                src="/logo.png" 
                alt="PMH Runners Logo" 
                className="w-12 h-12 md:w-20 md:h-20 opacity-70"
                width={80}
                height={80}
              />
            </div>

            {/* Achievement Statement */}
            <div className="text-center mb-4 md:mb-8">
              <p className="text-lg md:text-2xl text-gray-700 mb-3 md:mb-6 leading-relaxed">
                Ch·ª©ng nh·∫≠n r·∫±ng
              </p>
              
              {/* Runner Name */}
              <div className="mb-3 md:mb-6">
                <h2 className="text-2xl md:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-yellow-400 via-amber-400 to-blue-500 bg-clip-text text-transparent mb-2 md:mb-4 break-words">
                  {runner.name}
                </h2>
              </div>

              <p className="text-lg md:text-2xl text-gray-700 mb-4 md:mb-8 leading-relaxed">
                ƒë√£ ho√†n th√†nh xu·∫•t s·∫Øc<br />
                <span className="font-bold text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-amber-400">
                  Legend of PMHR 2025
                </span>
              </p>
            </div>

            {/* Achievement Details Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-8 mb-4 md:mb-8">
              {/* Left Column - Rank and Stats */}
              <div className="text-center">
                <div className={`relative w-32 h-32 md:w-48 md:h-48 mx-auto mb-3 md:mb-6 rounded-full flex items-center justify-center border-4 md:border-8 bg-gradient-to-r ${getRankColor(rank)} shadow-xl text-white`}>
                  <div className="text-center">
                    <div className="text-2xl md:text-4xl mb-1 md:mb-2">{getMedalEmoji(rank)}</div>
                    <div className="text-lg md:text-2xl font-bold">#{rank}</div>
                    <div className="text-xs md:text-sm opacity-90">X·∫øp h·∫°ng</div>
                  </div>
                </div>
                <div className="bg-yellow-50 rounded-lg p-3 md:p-4 border border-yellow-200">
                  <h3 className="font-semibold text-gray-800 mb-2 md:mb-3 text-sm md:text-base">Th√¥ng Tin V·∫≠n ƒê·ªông Vi√™n</h3>
                  <div className="space-y-1 md:space-y-2 text-xs md:text-sm">
                    <div>
                      <span className="text-gray-600">STT:</span>
                      <span className="ml-2 font-semibold text-yellow-600">#{runner.stt}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">Gi·ªõi t√≠nh:</span>
                      <span className={`ml-2 font-semibold ${runner.gender === "N·ªØ" ? "text-pink-600" : "text-blue-600"}`}>
                        {runner.gender}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Right Column - Achievement Records */}
              <div>
                <h3 className="text-lg md:text-xl font-bold text-gray-800 mb-3 md:mb-6 text-center">
                  Th√†nh T√≠ch LOP 2025
                </h3>
                <div className="space-y-3 md:space-y-4">
                  {/* Total Distance Achievement */}
                  <div className={`bg-gradient-to-r ${runner.gender === "N·ªØ" ? "from-yellow-100 to-pink-100 border-l-4 border-yellow-500" : "from-yellow-100 to-blue-100 border-l-4 border-yellow-500"} rounded-lg p-3 md:p-6`}>
                    <div className="text-center">
                      <div className="text-xs md:text-sm text-gray-600 mb-1 md:mb-2">T·ªïng Qu√£ng ƒê∆∞·ªùng T√≠ch L≈©y</div>
                      <div className={`text-2xl md:text-4xl font-bold font-mono ${runner.gender === "N·ªØ" ? "text-pink-600" : "text-blue-600"}`}>
                        {runner.distance} KM
                      </div>
                    </div>
                  </div>

                  {/* Rank Achievement */}
                  <div className="bg-gradient-to-r from-yellow-50 to-blue-50 rounded-lg p-3 md:p-4 border-l-4 border-yellow-400">
                    <div className="flex justify-between items-center">
                      <span className="font-medium text-gray-700 text-xs md:text-sm">X·∫øp h·∫°ng cu·ªëi c√πng</span>
                      <span className="text-lg md:text-2xl font-bold text-yellow-500">
                        #{rank}/{lop2025Runners.length}
                      </span>
                    </div>
                  </div>

                  {/* Gender Rank */}
                  <div className={`bg-gradient-to-r ${runner.gender === "N·ªØ" ? "from-yellow-50 to-pink-50 border-l-4 border-yellow-400" : "from-yellow-50 to-blue-50 border-l-4 border-blue-400"} rounded-lg p-3 md:p-4`}>
                    <div className="flex justify-between items-center">
                      <span className="font-medium text-gray-700 text-xs md:text-sm">X·∫øp h·∫°ng {runner.gender.toLowerCase()}</span>
                      <span className={`text-lg md:text-2xl font-bold ${runner.gender === "N·ªØ" ? "text-pink-600" : "text-blue-600"}`}>
                        #{lop2025Runners.filter(r => r.gender === runner.gender).findIndex(r => r.stt === runner.stt) + 1}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Achievement Highlights */}
            <div className="bg-gradient-to-r from-yellow-50 via-amber-50 to-yellow-50 rounded-lg p-4 md:p-6 mb-4 md:mb-8 border border-yellow-200">
              <h3 className="text-base md:text-lg font-bold text-center text-gray-800 mb-3 md:mb-4">
                üåü Danh Hi·ªáu ƒê·∫°t ƒê∆∞·ª£c üåü
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3 md:gap-4 text-center">
                <div className="bg-white rounded-lg p-2 md:p-3 shadow-sm border border-yellow-100">
                  <div className="text-sm md:text-lg font-bold text-yellow-500">HUY·ªÄN THO·∫†I</div>
                  <p className="text-xs text-gray-600">Legend of PMHR</p>
                </div>
                <div className="bg-white rounded-lg p-2 md:p-3 shadow-sm border border-amber-100">
                  <div className="text-sm md:text-lg font-bold text-amber-500">B·ªÄN B·ªà</div>
                  <p className="text-xs text-gray-600">Ki√™n tr√¨ luy·ªán t·∫≠p</p>
                </div>
                <div className="bg-white rounded-lg p-2 md:p-3 shadow-sm border border-blue-100">
                  <div className="text-sm md:text-lg font-bold text-blue-500">XU·∫§T S·∫ÆC</div>
                  <p className="text-xs text-gray-600">Th√†nh t√≠ch ·∫•n t∆∞·ª£ng</p>
                </div>
              </div>
            </div>

            {/* Competition Period */}
            <div className="bg-yellow-50 rounded-lg p-3 md:p-4 mb-4 md:mb-8 border border-yellow-300">
              <div className="text-center">
                <h4 className="font-semibold text-yellow-800 mb-1 md:mb-2 text-sm md:text-base">Th·ªùi Gian Thi ƒê·∫•u</h4>
                <p className="text-yellow-700 text-xs md:text-base">T√≠nh ƒë·∫øn h·∫øt ng√†y 04 th√°ng 8, 2025</p>
                <p className="text-xs md:text-sm text-yellow-600 mt-1">Cu·ªôc thi v·∫´n ƒëang di·ªÖn ra ƒë·∫øn ng√†y 12/08/2025</p>
              </div>
            </div>

            {/* Signatures and Date */}
            <div className="border-t border-gray-200 pt-4 md:pt-8">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-8">
                <div className="text-center">
                  <div className="border-b-2 border-gray-300 pb-1 md:pb-2 mb-1 md:mb-2 mx-4 md:mx-8">
                    <span className="text-sm md:text-lg font-elegant">PH√ö M·ª∏ H∆ØNG RUNNERS</span>
                  </div>
                  <p className="text-xs md:text-sm text-gray-600">Ban T·ªï Ch·ª©c</p>
                </div>
                <div className="text-center">
                  <div className="border-b-2 border-gray-300 pb-1 md:pb-2 mb-1 md:mb-2 mx-4 md:mx-8">
                    <span className="text-sm md:text-lg font-elegant">{currentDate}</span>
                  </div>
                  <p className="text-xs md:text-sm text-gray-600">Ng√†y C·∫•p Ch·ª©ng Ch·ªâ</p>
                </div>
              </div>
            </div>

            {/* Certificate ID */}
            <div className="text-center mt-4 md:mt-8">
              <p className="text-xs text-gray-500">
                M√£ Ch·ª©ng Ch·ªâ: LOP2025-{runner.stt.toString().padStart(4, '0')}
              </p>
            </div>
          </div>

          {/* Decorative Border */}
          <div className="h-2 md:h-4 bg-gradient-to-r from-yellow-300 via-amber-300 to-blue-300"></div>
        </div>

        {/* Action Buttons */}
        <div className="mt-4 md:mt-8 text-center space-y-3 md:space-y-0 md:space-x-4 flex flex-col md:flex-row justify-center">
          <button 
            onClick={downloadCertificateHTML2Canvas}
            className="inline-flex items-center justify-center px-4 md:px-6 py-3 bg-green-500 text-white font-semibold rounded-lg hover:bg-green-600 transition-colors duration-200 shadow-lg text-sm md:text-base"
          >
            <svg className="w-4 h-4 md:w-5 md:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            üéØ T·∫£i T·ª± ƒê·ªông (Khuy√™n d√πng)
          </button>
          <button 
            onClick={downloadCertificateScreenshot}
            className="inline-flex items-center justify-center px-4 md:px-6 py-3 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 transition-colors duration-200 shadow-lg text-sm md:text-base"
          >
            <svg className="w-4 h-4 md:w-5 md:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
            üì± Ch·ª•p C√≥ H∆∞·ªõng D·∫´n
          </button>
          <button 
            onClick={downloadCertificateAuto}
            className="inline-flex items-center justify-center px-4 md:px-6 py-3 bg-yellow-400 text-white font-semibold rounded-lg hover:bg-yellow-500 transition-colors duration-200 shadow-lg text-sm md:text-base"
          >
            <svg className="w-4 h-4 md:w-5 md:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 0h10m-10 0a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V6a2 2 0 00-2-2" />
            </svg>
            üéØ H∆∞·ªõng D·∫´n Ch√≠nh X√°c
          </button>
          <button 
            onClick={showDownloadInstructions}
            className="inline-flex items-center justify-center px-4 md:px-6 py-3 bg-gray-500 text-white font-semibold rounded-lg hover:bg-gray-600 transition-colors duration-200 shadow-lg text-sm md:text-base"
          >
            <svg className="w-4 h-4 md:w-5 md:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            üìã H∆∞·ªõng D·∫´n Chi Ti·∫øt
          </button>
        </div>

        {/* Method Comparison Guide */}
        <div className="mt-4 md:mt-8 bg-white/90 backdrop-blur-sm rounded-xl p-4 md:p-6 shadow-lg border border-blue-100">
          <h3 className="text-lg md:text-xl font-bold text-center text-gray-800 mb-3 md:mb-4">
            üîß So S√°nh C√°c Ph∆∞∆°ng Ph√°p
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4 text-sm">
            <div className="bg-green-50 border border-green-200 rounded-lg p-3">
              <div className="font-bold text-green-600 mb-2">üéØ T·∫£i T·ª± ƒê·ªông</div>
              <div className="text-green-700 text-xs">
                ‚úÖ Ch·ªâ ch·ª©ng ch·ªâ, kh√¥ng c√≥ n·ªÅn<br/>
                ‚úÖ Ch·∫•t l∆∞·ª£ng cao<br/>
                ‚úÖ Kh√¥ng c·∫ßn crop<br/>
                ‚ö†Ô∏è C·∫ßn c√†i th∆∞ vi·ªán
              </div>
            </div>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
              <div className="font-bold text-blue-600 mb-2">üì± Ch·ª•p C√≥ H∆∞·ªõng D·∫´n</div>
              <div className="text-blue-700 text-xs">
                ‚úÖ Ho·∫°t ƒë·ªông m·ªçi tr√¨nh duy·ªát<br/>
                ‚úÖ C√≥ vi·ªÅn ƒë·ªè ƒë·ªãnh h∆∞·ªõng<br/>
                ‚ö†Ô∏è C·∫ßn crop sau khi ch·ª•p<br/>
                ‚ö†Ô∏è Ch·∫•t l∆∞·ª£ng t√πy m√†n h√¨nh
              </div>
            </div>
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
              <div className="font-bold text-yellow-600 mb-2">üéØ H∆∞·ªõng D·∫´n Ch√≠nh X√°c</div>
              <div className="text-yellow-700 text-xs">
                ‚úÖ Khung xanh ch√≠nh x√°c<br/>
                ‚úÖ H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc<br/>
                ‚úÖ Ph√π h·ª£p m·ªçi thi·∫øt b·ªã<br/>
                ‚ö†Ô∏è C·∫ßn ch·ª•p th·ªß c√¥ng
              </div>
            </div>
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-3">
              <div className="font-bold text-gray-600 mb-2">üìã H∆∞·ªõng D·∫´n Chi Ti·∫øt</div>
              <div className="text-gray-700 text-xs">
                ‚úÖ H∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß<br/>
                ‚úÖ Nhi·ªÅu c√°ch th·ª±c hi·ªán<br/>
                ‚úÖ Ph√π h·ª£p ng∆∞·ªùi m·ªõi<br/>
                ‚ö†Ô∏è C·∫ßn ƒë·ªçc k·ªπ h∆∞·ªõng d·∫´n
              </div>
            </div>
          </div>
        </div>

        {/* Achievement Summary */}
        <div className="mt-4 md:mt-8 bg-white/80 backdrop-blur-sm rounded-xl p-4 md:p-6 shadow-lg border border-yellow-100">
          <h3 className="text-lg md:text-xl font-bold text-center text-gray-800 mb-3 md:mb-4">
            üìä Th·ªëng K√™ C√° Nh√¢n
          </h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 md:gap-4 text-center">
            <div className="bg-gradient-to-br from-yellow-400 to-amber-500 text-white rounded-lg p-3 md:p-4">
              <div className="text-lg md:text-2xl font-bold">{runner.distance}</div>
              <div className="text-xs md:text-sm opacity-90">KM T√≠ch L≈©y</div>
            </div>
            <div className="bg-gradient-to-br from-amber-400 to-yellow-500 text-white rounded-lg p-3 md:p-4">
              <div className="text-lg md:text-2xl font-bold">#{rank}</div>
              <div className="text-xs md:text-sm opacity-90">X·∫øp H·∫°ng Chung</div>
            </div>
            <div className={`bg-gradient-to-br ${runner.gender === "N·ªØ" ? "from-pink-400 to-pink-500" : "from-blue-400 to-blue-500"} text-white rounded-lg p-3 md:p-4`}>
              <div className="text-lg md:text-2xl font-bold">
                #{lop2025Runners.filter(r => r.gender === runner.gender).findIndex(r => r.stt === runner.stt) + 1}
              </div>
              <div className="text-xs md:text-sm opacity-90">X·∫øp H·∫°ng {runner.gender}</div>
            </div>
            <div className="bg-gradient-to-br from-blue-400 to-indigo-500 text-white rounded-lg p-3 md:p-4">
              <div className="text-lg md:text-2xl font-bold">2025</div>
              <div className="text-xs md:text-sm opacity-90">NƒÉm Thi ƒê·∫•u</div>
            </div>
          </div>
        </div>

        {/* Motivational Message */}
        <div className="mt-4 md:mt-8 text-center bg-gradient-to-r from-yellow-100 to-amber-100 rounded-xl p-4 md:p-6 border border-yellow-300">
          <h4 className="text-base md:text-lg font-bold text-gray-800 mb-2">
            üéâ Ch√∫c M·ª´ng V·∫≠n ƒê·ªông Vi√™n Huy·ªÅn Tho·∫°i! üéâ
          </h4>
          <p className="text-sm md:text-base text-gray-600">
            Th√†nh t√≠ch c·ªßa b·∫°n trong LOP 2025 l√† minh ch·ª©ng cho s·ª± ki√™n tr√¨, n·ªó l·ª±c v√† tinh th·∫ßn th·ªÉ thao cao c·∫£. 
            H√£y ti·∫øp t·ª•c duy tr√¨ phong ƒë·ªô v√† chinh ph·ª•c nh·ªØng th·ª≠ th√°ch m·ªõi!
          </p>
        </div>

        {/* Installation Instructions */}
        <div className="mt-4 md:mt-8 bg-blue-50 border border-blue-200 rounded-xl p-4 md:p-6">
          <h4 className="text-base md:text-lg font-bold text-blue-800 mb-2">
            ‚öôÔ∏è L∆∞u √Ω cho Developers
          </h4>
          <p className="text-sm text-blue-700 mb-2">
            ƒê·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng &quot;T·∫£i T·ª± ƒê·ªông&quot;, c·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán html2canvas:
          </p>
          <div className="bg-blue-100 p-3 rounded-lg font-mono text-sm">
            npm install html2canvas@^1.4.1
          </div>
          <p className="text-xs text-blue-600 mt-2">
            Ch·ª©c nƒÉng n√†y s·∫Ω t·ª± ƒë·ªông crop ch·ªâ ph·∫ßn ch·ª©ng ch·ªâ v·ªõi ch·∫•t l∆∞·ª£ng cao nh·∫•t.
          </p>
        </div>
      </div>
    </div>
  );
}